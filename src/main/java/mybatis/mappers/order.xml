<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
   "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="order">
	<insert id="orderInsert" parameterType="map">
		INSERT INTO ORDERS
		(ORDER_ID, USER_ID, ALBUM_ID,
		ORDER_DATE,TOTAL,O_QUANTITY)
		VALUES
		((SELECT CASE WHEN SUBSTR((SELECT MAX(ORDER_ID) FROM ORDERS),0,6) =
		TO_CHAR(SYSDATE,'YYMMDD')
		THEN TO_CHAR(SYSDATE,'YYMMDD') || 'N' ||
		LPAD(SUBSTR((SELECT MAX(ORDER_ID)
		FROM ORDERS),-4)+1,4,'0')
		ELSE
		TO_CHAR(SYSDATE,'YYMMDD') || 'N' ||'0001'
		END FROM DUAL)
		,
		#{userId},#{albumId} ,SYSDATE, (SELECT I.ALBUM_PRICE * #{oQuantity}
		FROM INVENTORY I, ALBUM A
		WHERE I.ALBUM_ID = A.ALBUM_ID AND A.ALBUM_ID
		= #{albumId}) ,#{oQuantity})
	</insert>

	<!-- UserId로 ordersVo 불러오기 -->
	<select id="selectAllOrdersByUserId" parameterType="String"
		resultType="OrdersVo">
		SELECT
		ORDER_ID as orderId, USER_ID as userId,
		ALBUM_ID as
		albumId, ORDER_DATE as orderDate,
		TOTAL, O_QUANTITY as oQuantity
		FROM
		ORDERS
		WHERE
		USER_ID = #{value}
		order by order_date desc
	</select>
	<select id="selectAllOrders" resultType="OrdersVo">
		SELECT
			ORDER_ID AS
			orderId,
			USER_ID AS userId,
			ALBUM_ID AS albumId,
			ORDER_DATE AS orderDate,
			TOTAL,
			O_QUANTITY AS oQuantity
		FROM
			ORDERS
		ORDER BY
			ORDER_DATE DESC
	</select>

	<select id="selectByOrderId" parameterType="String"
		resultType="OrdersVo">
		SELECT
		ORDER_ID as orderId, USER_ID as userId,
		ALBUM_ID as
		albumId, ORDER_DATE as orderDate,
		TOTAL, O_QUANTITY as oQuantity
		FROM
		ORDERS
		WHERE
		ORDER_ID = #{value}
	</select>

	<select id="searchOrders" parameterType="hashmap"
		resultType="OrdersVo">
		SELECT
		O.ORDER_ID AS orderId,
		U.USER_NAME AS userName,
		O.ORDER_DATE AS orderDate,
		O.O_QUANTITY AS oQuantity,
		S.SHIPMENT_STATUS AS status,
		O.TOTAL AS total
		FROM
		USERS U
		JOIN
		ORDERS O ON U.USER_ID = O.USER_ID
		JOIN
		SHIPMENTS S ON O.ORDER_ID = S.ORDER_ID
		WHERE
		U.USER_NAME LIKE CONCAT('%', #{keyword}, '%')
		OR O.ORDER_ID LIKE CONCAT('%', #{keyword}, '%')
		ORDER BY
		O.ORDER_DATE DESC
	</select>

	<select id="getAlbumIdByOrderId" parameterType="String"
		resultType="String">
		select album_id as albumId
		from orders
		where
		order_id =
		#{orderId}

	</select>
	<update id="updateByOrderId" parameterType="map">
		UPDATE ORDERS
		SET
		ORDER_ID = #{orderId},
		ALBUM_ID = #{albumId},
		ORDER_DATE = #{orderDate},
		O_Quantity = #{oQuantity},
		TOTAL = #{total}
		WHERE ORDER_ID=#{updateId}
	</update>
	<select id="selectRecentOrderByUserId" parameterType="String" resultType="OrdersVo">
		SELECT 
			ORDER_ID as orderId, 
			USER_ID as userId,
			ALBUM_ID as albumId, 
			ORDER_DATE as orderDate,
			TOTAL, O_QUANTITY as oQuantity
		FROM ORDERS
		Where USER_ID = #{value}
		ORDER BY ORDER_DATE DESC
		FETCH FIRST 1 ROW ONLY
	</select>
	<select id="countOrder" resultType="String">

	WITH 
order_count AS (SELECT COUNT(order_id) AS count FROM orders),
shipment_count AS (SELECT COUNT(shipment_id) AS count FROM shipments),
refund_count AS (SELECT COUNT(refund_id) AS count FROM refund)
SELECT 
    o.count - s.count - r.count AS remaining_orders
FROM 
    order_count o, 
    shipment_count s, 
    refund_count r
    </select>
    <!--효원코드 판매량 조회하는거임  -->
    <select id="countSale" resultType="map">
    SELECT 
            SUM(CASE WHEN TRUNC(s.SHIPMENT_DATE) = TRUNC(SYSDATE) THEN o.TOTAL ELSE 0 END) as todaySales,
            SUM(CASE WHEN TRUNC(s.SHIPMENT_DATE) >= TRUNC(SYSDATE, 'MM') THEN o.TOTAL ELSE 0 END) as monthlySales,
            SUM(CASE WHEN TRUNC(s.SHIPMENT_DATE) >= TRUNC(SYSDATE, 'YYYY') THEN o.TOTAL ELSE 0 END) as yearlySales,
            SUM(o.TOTAL) as totalSales
        FROM ORDERS o
        JOIN SHIPMENTS s ON o.ORDER_ID = s.ORDER_ID
        WHERE s.SHIPMENT_STATUS = 'C'
    </select>
    <!-- 효원코드 제일 많이팔린거 다섯개 들고오는거임-->
    <select id="getTopAlbum" resultType="map">
    SELECT o.ALBUM_ID, SUM(o.O_QUANTITY) as SALES_COUNT
    FROM ORDERS o
    JOIN SHIPMENTS s ON o.ORDER_ID = s.ORDER_ID
    WHERE s.SHIPMENT_STATUS = 'C'
    GROUP BY o.ALBUM_ID
    ORDER BY SALES_COUNT DESC
    FETCH FIRST 5 ROWS ONLY
</select>

<delete id= "delete" parameterType="string">
 DELETE FROM ORDERS
        WHERE ORDER_ID = #{orderId}
</delete>
</mapper>